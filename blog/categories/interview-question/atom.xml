<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: interview question | Found Objects]]></title>
  <link href="http://adonley.github.io/blog/categories/interview-question/atom.xml" rel="self"/>
  <link href="http://adonley.github.io/"/>
  <updated>2013-06-19T00:07:02-07:00</updated>
  <id>http://adonley.github.io/</id>
  <author>
    <name><![CDATA[Andrew Donley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Longest Non-Decreasing Subsequence]]></title>
    <link href="http://adonley.github.io/blog/2013/06/18/longest-non-decreasing-subsequence/"/>
    <updated>2013-06-18T23:13:00-07:00</updated>
    <id>http://adonley.github.io/blog/2013/06/18/longest-non-decreasing-subsequence</id>
    <content type="html"><![CDATA[<script type="math/tex; mode=display">% &lt;![CDATA[
 \mbox{Given an array of integers } A \mbox{ of length } n \mbox{, find the longest sequence } \langle i_1,...,i_k \rangle \\
 \mbox{ such that } i_j < i_{j+1} \mbox{ and } A[i_j] \leq A[i_{j+1}] \mbox{ for any } j \in [1,k-1] %]]&gt;</script>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (LongestNonDecreasingSubsequence.h)</span> <a href='/downloads/code/LongestNonDecreasingSubsequence.h'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifndef LONGESTNONDECREASINGSUBSEQUENCE_H</span>
</span><span class='line'><span class="cp">#define LONGESTNONDECREASINGSUBSEQUENCE_H</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include&lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Position</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">max_sub_sequence</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Position</span> <span class="o">*</span><span class="n">Parent</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">update_number</span><span class="p">(</span><span class="kt">int</span> <span class="n">temp</span><span class="p">)</span> <span class="p">{</span><span class="n">number</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">update_max</span><span class="p">(</span><span class="kt">int</span> <span class="n">temp</span><span class="p">)</span> <span class="p">{</span><span class="n">max_sub_sequence</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">update_parent</span><span class="p">(</span><span class="n">Position</span> <span class="o">*</span><span class="n">temp</span><span class="p">)</span> <span class="p">{</span><span class="n">Parent</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">update_index</span><span class="p">(</span><span class="kt">int</span> <span class="n">temp</span><span class="p">)</span> <span class="p">{</span><span class="n">index</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">get_index</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">index</span><span class="p">;}</span>
</span><span class='line'>    <span class="n">Position</span> <span class="o">*</span> <span class="n">get_parent</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Parent</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">get_max</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">max_sub_sequence</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">get_number</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">number</span><span class="p">;}</span>
</span><span class='line'>    <span class="n">Position</span><span class="p">(</span><span class="kt">int</span> <span class="n">temp_number</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">display</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">getInput</span><span class="p">();</span>
</span><span class='line'><span class="kt">void</span> <span class="n">computeMaxSub</span><span class="p">();</span>
</span><span class='line'><span class="kt">void</span> <span class="n">displayResults</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Position</span><span class="o">&gt;</span> <span class="n">sequence</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (LongestNonDecreasingSubsequence.cpp)</span> <a href='/downloads/code/LongestNonDecreasingSubsequence.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *  Andrew Donley </span>
</span><span class='line'><span class="cm"> *  Dynamic Programming Problem:</span>
</span><span class='line'><span class="cm"> *  Longest NonDecreasing Subsequence</span>
</span><span class='line'><span class="cm"> *  June 18th, 2013</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;LongestNonDecreasingSubsequence.h&quot;</span>
</span><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include&lt;string&gt;</span>
</span><span class='line'><span class="cp">#include&lt;sstream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">getInput</span><span class="p">();</span>
</span><span class='line'>  <span class="n">computeMaxSub</span><span class="p">();</span>
</span><span class='line'>  <span class="n">displayResults</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Position</span><span class="o">::</span><span class="n">Position</span><span class="p">(</span><span class="kt">int</span> <span class="n">temp_number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">number</span> <span class="o">=</span> <span class="n">temp_number</span><span class="p">;</span>
</span><span class='line'>  <span class="n">max_sub_sequence</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Position</span><span class="o">::</span><span class="n">display</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Number: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">number</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, Index: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">index</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, Max: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">max_sub_sequence</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *  Gets the sequence from user input</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">getInput</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">string</span> <span class="n">input</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">val</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Position</span> <span class="o">*</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Longest Non-Decreasing Subsequence&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;==================================&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Please enter a sequence of numbers deliniated by spaces.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Press &#39;return&#39; to submit the sequence.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">input</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">istringstream</span> <span class="n">iss</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Store the items</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">iss</span> <span class="o">&gt;&gt;</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Position</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">update_index</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sequence</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">temp</span><span class="p">);</span>
</span><span class='line'>    <span class="n">index</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *  Computes the longest subsquence</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">computeMaxSub</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">largest_sub</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Position</span> <span class="o">*</span> <span class="n">temp_parent</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Position</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="o">-&gt;</span><span class="n">get_index</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">-&gt;</span><span class="n">get_number</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">get_number</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">sequence</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">get_max</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">largest_sub</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">largest_sub</span> <span class="o">=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">get_max</span><span class="p">();</span>
</span><span class='line'>        <span class="n">temp_parent</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">sequence</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Update the largest increasing subsequence</span>
</span><span class='line'>    <span class="n">i</span><span class="o">-&gt;</span><span class="n">update_parent</span><span class="p">(</span><span class="n">temp_parent</span><span class="p">);</span>
</span><span class='line'>    <span class="n">i</span><span class="o">-&gt;</span><span class="n">update_max</span><span class="p">(</span><span class="n">largest_sub</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Reset the values</span>
</span><span class='line'>    <span class="n">largest_sub</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">temp_parent</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> *  Outputs the longest subsequence to stdout</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">displayResults</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">largest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Position</span> <span class="o">*</span> <span class="n">temp_position</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="n">Position</span><span class="o">&gt;</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Position</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">-&gt;</span><span class="n">get_max</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">largest</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">largest</span> <span class="o">=</span> <span class="n">i</span><span class="o">-&gt;</span><span class="n">get_max</span><span class="p">();</span>
</span><span class='line'>      <span class="n">temp_position</span> <span class="o">=</span> <span class="o">&amp;*</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">temp_position</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">output</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">temp_position</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp_position</span> <span class="o">=</span> <span class="n">temp_position</span><span class="o">-&gt;</span><span class="n">get_parent</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The longest subsequence had length: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">output</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">get_max</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">output</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">output</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">get_number</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; -&gt; &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
