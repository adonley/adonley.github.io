<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: interview questions | Found Objects]]></title>
  <link href="http://adonley.github.io/blog/categories/interview-questions/atom.xml" rel="self"/>
  <link href="http://adonley.github.io/"/>
  <updated>2013-06-03T00:25:25-07:00</updated>
  <id>http://adonley.github.io/</id>
  <author>
    <name><![CDATA[Andrew Donley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Another Interview Question]]></title>
    <link href="http://adonley.github.io/blog/2013/05/31/more-interview-questions/"/>
    <updated>2013-05-31T21:22:00-07:00</updated>
    <id>http://adonley.github.io/blog/2013/05/31/more-interview-questions</id>
    <content type="html"><![CDATA[<p>This is another problem that is bound to come up during interviews.</p>

<p>How would you tell if there is a loop in a linked list if there is an arbitrary length, using little to no memory?</p>

<p>The idea in solving this problem is having two iterators, one which iterates faster through the linked list than the other. This way, the faster moving iterator catches up to or laps the slower iterator in the event of a loop. Otherwise the first iterator will find the end of the list.</p>

<p>In the following code example I made the one iterator move twice as fast as the other. Each step I check to see if the iterators point to the same object or the end of the linked list is found.</p>

<p>Feel free to download and try it yourself.</p>

<p>Compile with:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcc LinkedListLoopDetection.c -o LinkedListLoopDetection
</span><span class='line'>$ ./LinkedListLoopDetection &lt; nodes.txt</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (LinkedListLoopDetection.c)</span> <a href='/downloads/code/LinkedListLoopDetection.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Functions</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">listInitialize</span><span class="p">();</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">detectLoop</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// List Node Struct</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Node</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">info</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Globals</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">numberOfNodes</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">loopBegin</span><span class="p">;</span> <span class="c1">// This is the node where the loop starts in the list</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">listInitialize</span><span class="p">();</span>
</span><span class='line'>  <span class="n">detectLoop</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">detectLoop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Going to use two pointers to traverse the list.</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">iter1</span> <span class="o">=</span> <span class="n">list</span><span class="p">,</span> <span class="o">*</span><span class="n">iter2</span> <span class="o">=</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">iter1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">iter1</span> <span class="o">=</span> <span class="n">iter1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// If iter1 equals iter2 we know there is a loop</span>
</span><span class='line'>    <span class="c1">// Also if iter1-&gt;next equals NULL we know there is no loop</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">iter1</span> <span class="o">==</span> <span class="n">iter2</span> <span class="o">||</span> <span class="n">iter1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Move iter a second time</span>
</span><span class='line'>    <span class="n">iter1</span> <span class="o">=</span> <span class="n">iter1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Check Equality Again</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">iter1</span> <span class="o">==</span> <span class="n">iter2</span><span class="p">)</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1">// Move iter2 by one</span>
</span><span class='line'>      <span class="n">iter2</span> <span class="o">=</span> <span class="n">iter2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// If there is there is a NULL pointer we know we reached</span>
</span><span class='line'>  <span class="c1">//   the end of the list</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">iter1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="s">&quot;There was no loop in this Linked List.&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Otherwise the while loop broke because it found a loop</span>
</span><span class='line'>  <span class="c1">//   in the Linked List</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="s">&quot;There was a loop in the Linked List.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Reads in file and initializes the list including a loop</span>
</span><span class='line'><span class="cm"> * if specified.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">listInitialize</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">temp</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// This is to keep track of place in list</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">iter</span><span class="p">,</span> <span class="o">*</span><span class="n">iter2</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Read in number of nodes</span>
</span><span class='line'>  <span class="n">fgets</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="mi">256</span><span class="p">,</span><span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>  <span class="n">numberOfNodes</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Read in loop beginning node</span>
</span><span class='line'>  <span class="n">fgets</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="mi">256</span><span class="p">,</span><span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>  <span class="n">loopBegin</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numberOfNodes</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Throw this guy on the heap</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">iter</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'>      <span class="n">list</span> <span class="o">=</span> <span class="n">iter</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">iter</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'>    <span class="n">fgets</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="mi">256</span><span class="p">,</span><span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>    <span class="n">iter</span><span class="o">-&gt;</span><span class="n">info</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Don&#39;t want to move to next on the last iteration</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">numberOfNodes</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">iter</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">iter</span><span class="p">).</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1">// Get rid of unnecessary allocation</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Negative Value means create no loop</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">loopBegin</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Initialize iter2 to head of the list</span>
</span><span class='line'>    <span class="n">iter2</span> <span class="o">=</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">loopBegin</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Get to the spot where we want to create the loop</span>
</span><span class='line'>      <span class="n">iter2</span> <span class="o">=</span> <span class="n">iter2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Create the Loop</span>
</span><span class='line'>    <span class="n">iter</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">iter2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Create no Loop</span>
</span><span class='line'>    <span class="n">iter</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!--more-->


<p>The first line in nodes.txt signifies how many nodes there are in the list.
The value on the second line signifies which node to connect the last node to (i.e.&ndash; from which node to create the loop in the linked list). A negative value here signifies not to create a loop.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (nodes.txt)</span> <a href='/downloads/code/nodes.txt'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>5
</span><span class='line'>3
</span><span class='line'>876
</span><span class='line'>877
</span><span class='line'>878
</span><span class='line'>879
</span><span class='line'>880
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
