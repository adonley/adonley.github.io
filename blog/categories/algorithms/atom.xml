<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithms | Found Objects]]></title>
  <link href="http://adonley.github.io/blog/categories/algorithms/atom.xml" rel="self"/>
  <link href="http://adonley.github.io/"/>
  <updated>2013-06-18T23:22:20-07:00</updated>
  <id>http://adonley.github.io/</id>
  <author>
    <name><![CDATA[Andrew Donley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Longest Non-Decreasing Subsequence]]></title>
    <link href="http://adonley.github.io/blog/2013/06/18/longest-non-decreasing-subsequence/"/>
    <updated>2013-06-18T23:13:00-07:00</updated>
    <id>http://adonley.github.io/blog/2013/06/18/longest-non-decreasing-subsequence</id>
    <content type="html"><![CDATA[<p>Problem:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
 \mbox{Given an array of integers} A \mbox{of length} n \mbox{, find the longest sequence} <i_1,...,i_k> \mbox{such that} i_j < i_{j+1} \mbox{and} A[i_j] \leq A[i_{j+1}] \mbox{for any} j \in [1,k-1] %]]&gt;</script>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (LongestNonDecreasingSubsequence.h)</span> <a href='/downloads/code/LongestNonDecreasingSubsequence.h'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifndef LONGESTNONDECREASINGSUBSEQUENCE_H</span>
</span><span class='line'><span class="cp">#define LONGESTNONDECREASINGSUBSEQUENCE_H</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include&lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Position</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">max_sub_sequence</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Position</span> <span class="o">*</span><span class="n">Parent</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">update_number</span><span class="p">(</span><span class="kt">int</span> <span class="n">temp</span><span class="p">)</span> <span class="p">{</span><span class="n">number</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">update_max</span><span class="p">(</span><span class="kt">int</span> <span class="n">temp</span><span class="p">)</span> <span class="p">{</span><span class="n">max_sub_sequence</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">update_parent</span><span class="p">(</span><span class="n">Position</span> <span class="o">*</span><span class="n">temp</span><span class="p">)</span> <span class="p">{</span><span class="n">Parent</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">update_index</span><span class="p">(</span><span class="kt">int</span> <span class="n">temp</span><span class="p">)</span> <span class="p">{</span><span class="n">index</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">get_index</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">index</span><span class="p">;}</span>
</span><span class='line'>    <span class="n">Position</span> <span class="o">*</span> <span class="n">get_parent</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Parent</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">get_max</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">max_sub_sequence</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">get_number</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">number</span><span class="p">;}</span>
</span><span class='line'>    <span class="n">Position</span><span class="p">(</span><span class="kt">int</span> <span class="n">temp_number</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">display</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">getInput</span><span class="p">();</span>
</span><span class='line'><span class="kt">void</span> <span class="n">computeMaxSub</span><span class="p">();</span>
</span><span class='line'><span class="kt">void</span> <span class="n">displayResults</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Position</span><span class="o">&gt;</span> <span class="n">sequence</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (LongestNonDecreasingSubsequence.cpp)</span> <a href='/downloads/code/LongestNonDecreasingSubsequence.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *  Andrew Donley </span>
</span><span class='line'><span class="cm"> *  Dynamic Programming Problem:</span>
</span><span class='line'><span class="cm"> *  Longest NonDecreasing Subsequence</span>
</span><span class='line'><span class="cm"> *  June 18th, 2013</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;LongestNonDecreasingSubsequence.h&quot;</span>
</span><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include&lt;string&gt;</span>
</span><span class='line'><span class="cp">#include&lt;sstream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">getInput</span><span class="p">();</span>
</span><span class='line'>  <span class="n">computeMaxSub</span><span class="p">();</span>
</span><span class='line'>  <span class="n">displayResults</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Position</span><span class="o">::</span><span class="n">Position</span><span class="p">(</span><span class="kt">int</span> <span class="n">temp_number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">number</span> <span class="o">=</span> <span class="n">temp_number</span><span class="p">;</span>
</span><span class='line'>  <span class="n">max_sub_sequence</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Position</span><span class="o">::</span><span class="n">display</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Number: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">number</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, Index: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">index</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, Max: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">max_sub_sequence</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *  Gets the sequence from user input</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">getInput</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">string</span> <span class="n">input</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">val</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Position</span> <span class="o">*</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Longest Non-Decreasing Subsequence&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;==================================&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Please enter a sequence of numbers deliniated by spaces.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Press &#39;return&#39; to submit the sequence.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">input</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">istringstream</span> <span class="n">iss</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Store the items</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">iss</span> <span class="o">&gt;&gt;</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Position</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">update_index</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sequence</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">temp</span><span class="p">);</span>
</span><span class='line'>    <span class="n">index</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *  Computes the longest subsquence</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">computeMaxSub</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">largest_sub</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Position</span> <span class="o">*</span> <span class="n">temp_parent</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Position</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="o">-&gt;</span><span class="n">get_index</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">-&gt;</span><span class="n">get_number</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">get_number</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">sequence</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">get_max</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">largest_sub</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">largest_sub</span> <span class="o">=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">get_max</span><span class="p">();</span>
</span><span class='line'>        <span class="n">temp_parent</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">sequence</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Update the largest increasing subsequence</span>
</span><span class='line'>    <span class="n">i</span><span class="o">-&gt;</span><span class="n">update_parent</span><span class="p">(</span><span class="n">temp_parent</span><span class="p">);</span>
</span><span class='line'>    <span class="n">i</span><span class="o">-&gt;</span><span class="n">update_max</span><span class="p">(</span><span class="n">largest_sub</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Reset the values</span>
</span><span class='line'>    <span class="n">largest_sub</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">temp_parent</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> *  Outputs the longest subsequence to stdout</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">displayResults</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">largest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Position</span> <span class="o">*</span> <span class="n">temp_position</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="n">Position</span><span class="o">&gt;</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Position</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">-&gt;</span><span class="n">get_max</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">largest</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">largest</span> <span class="o">=</span> <span class="n">i</span><span class="o">-&gt;</span><span class="n">get_max</span><span class="p">();</span>
</span><span class='line'>      <span class="n">temp_position</span> <span class="o">=</span> <span class="o">&amp;*</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">temp_position</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">output</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">temp_position</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp_position</span> <span class="o">=</span> <span class="n">temp_position</span><span class="o">-&gt;</span><span class="n">get_parent</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The longest subsequence had length: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">output</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">get_max</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">output</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">output</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">get_number</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; -&gt; &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copy Paste Select-All Problem]]></title>
    <link href="http://adonley.github.io/blog/2013/06/08/copy-paste-select-all-problem/"/>
    <updated>2013-06-08T21:45:00-07:00</updated>
    <id>http://adonley.github.io/blog/2013/06/08/copy-paste-select-all-problem</id>
    <content type="html"><![CDATA[<p>In the Copy Paste Select-All problem, a user wants to replicate the most amount of ‘a’s with the least amount of keystrokes. I was asked how many keystrokes would be necessary to produce 50,000 ‘a’s.</p>

<p>There are 3 basic ways to create ‘a’s: Pressing ‘a’, Selecting-All -&gt; Copying -&gt; Pasting, and Pasting what is in the clip board. Pressing ‘a’ will cost 1 keystroke while selecting-all, copying, pasting will cost 2 each. So just pasting will cost 2 keystrokes, but selecting-all -&gt; copying -&gt; pasting will cost 6.</p>

<p>Now let’s create the recursive definition of our dynamic programming problem.
$$
L(x) = { \mbox{max}[ L(x-6)*2,L(x-2)+buffer,L(x-1)+1 ] }
$$</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (CopyPasteProblem.java)</span> <a href='/downloads/code/CopyPasteProblem.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Interview Question at insideVault</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CopyPasteProblem</span> <span class="o">{</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyStroke</span> <span class="o">{</span>
</span><span class='line'>		
</span><span class='line'>		<span class="kt">int</span> <span class="n">numberOfA</span><span class="o">;</span>
</span><span class='line'>		<span class="kt">int</span> <span class="n">buffer</span><span class="o">;</span> <span class="c1">// Buffer value at a particular Keystroke</span>
</span><span class='line'>		<span class="kt">int</span> <span class="n">indexOfParent</span><span class="o">;</span>  <span class="c1">// To we can view the optimal solution</span>
</span><span class='line'>		
</span><span class='line'>		<span class="kd">public</span> <span class="nf">KeyStroke</span><span class="o">(</span><span class="kt">int</span> <span class="n">tempA</span><span class="o">,</span> <span class="kt">int</span> <span class="n">tempBuff</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">numberOfA</span> <span class="o">=</span> <span class="n">tempA</span><span class="o">;</span>
</span><span class='line'>			<span class="n">buffer</span> <span class="o">=</span> <span class="n">tempBuff</span><span class="o">;</span>
</span><span class='line'>			<span class="n">indexOfParent</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="kd">public</span> <span class="nf">KeyStroke</span><span class="o">(</span><span class="kt">int</span> <span class="n">tempA</span><span class="o">,</span> <span class="kt">int</span> <span class="n">tempBuff</span><span class="o">,</span> <span class="kt">int</span> <span class="n">tempParent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">numberOfA</span> <span class="o">=</span> <span class="n">tempA</span><span class="o">;</span>
</span><span class='line'>			<span class="n">buffer</span> <span class="o">=</span> <span class="n">tempBuff</span><span class="o">;</span>
</span><span class='line'>			<span class="n">indexOfParent</span> <span class="o">=</span> <span class="n">tempParent</span><span class="o">;</span>
</span><span class='line'>		<span class="o">}</span>	
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="n">ArrayList</span> <span class="o">&lt;</span><span class="n">KeyStroke</span><span class="o">&gt;</span><span class="n">strokes</span><span class="o">;</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="nf">CopyPasteProblem</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		<span class="c1">// Initialize the Strokes (ArrayList to be able to access</span>
</span><span class='line'>		<span class="c1">//   an index very quickly)</span>
</span><span class='line'>		<span class="n">strokes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">KeyStroke</span><span class="o">&gt;();</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">printStroke</span><span class="o">(</span><span class="n">KeyStroke</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;A&#39;s = %8d, Buffer = %8d, Parent = %8d\n&quot;</span><span class="o">,</span> <span class="n">key</span><span class="o">.</span><span class="na">numberOfA</span><span class="o">,</span> <span class="n">key</span><span class="o">.</span><span class="na">buffer</span><span class="o">,</span> <span class="n">key</span><span class="o">.</span><span class="na">indexOfParent</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">printAllStrokes</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">strokes</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span><span class="o">);</span>
</span><span class='line'>			<span class="n">printStroke</span><span class="o">(</span><span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">printResults</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;\nThe min number of keystrokes was %d and the final value of those keystrokes was %d. \n\n&quot;</span><span class="o">,</span> <span class="n">strokes</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">,</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">strokes</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span><span class="mi">1</span> <span class="o">).</span><span class="na">numberOfA</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">calculateOptomization</span><span class="o">(</span><span class="kt">int</span> <span class="n">numberToOptimize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">KeyStroke</span> <span class="n">tempStroke</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyStroke</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>		<span class="n">strokes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tempStroke</span><span class="o">);</span>
</span><span class='line'>		
</span><span class='line'>		<span class="c1">// strokes.get is constant because its an arraylist</span>
</span><span class='line'>		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">&lt;=</span> <span class="n">numberToOptimize</span><span class="o">;</span> <span class="n">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>			
</span><span class='line'>			<span class="c1">// This has to do with the recurance. Nothing in the buffer until there is a select-all, copy, paste</span>
</span><span class='line'>			<span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">6</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>				<span class="c1">// Have to find max at this stage. I&#39;m keeping the values in terms of their object - list access form</span>
</span><span class='line'>				<span class="c1">//   to accententuate the dynamic side of what&#39;s going on. Still constant access time because of ArrayList.</span>
</span><span class='line'>				
</span><span class='line'>				<span class="c1">// Case :If doing select all , copy, paste yields the max value for this many keystrokes</span>
</span><span class='line'>				<span class="k">if</span><span class="o">(</span><span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">6</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">&gt;=</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>						<span class="o">&amp;&amp;</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">6</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">&gt;=</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">+</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">).</span><span class="na">buffer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>					
</span><span class='line'>					<span class="n">tempStroke</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyStroke</span><span class="o">(</span><span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">6</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">*</span> <span class="mi">2</span><span class="o">,</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">6</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">,</span><span class="n">i</span><span class="o">-</span><span class="mi">6</span><span class="o">);</span>
</span><span class='line'>					<span class="n">strokes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tempStroke</span><span class="o">);</span>
</span><span class='line'>					
</span><span class='line'>				<span class="o">}</span>
</span><span class='line'>				<span class="c1">// Case: If doing paste from the buffer yields the max value for this number of keystrokes </span>
</span><span class='line'>				<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">+</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">).</span><span class="na">buffer</span> <span class="o">&gt;=</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">6</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>						<span class="o">&amp;&amp;</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">+</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">).</span><span class="na">buffer</span> <span class="o">&gt;=</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>					
</span><span class='line'>					<span class="n">tempStroke</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyStroke</span><span class="o">(</span><span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">+</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">).</span><span class="na">buffer</span> <span class="o">,</span><span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">).</span><span class="na">buffer</span> <span class="o">,</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>					<span class="n">strokes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tempStroke</span><span class="o">);</span>
</span><span class='line'>					
</span><span class='line'>				<span class="o">}</span>
</span><span class='line'>				<span class="c1">// Case: If pressing A to add one a yields the max number of &#39;a&#39;s for this number of keystrokes</span>
</span><span class='line'>				<span class="k">else</span> <span class="o">{</span>
</span><span class='line'>					
</span><span class='line'>					<span class="n">tempStroke</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyStroke</span><span class="o">(</span><span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span><span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">).</span><span class="na">buffer</span> <span class="o">,</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>					<span class="n">strokes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tempStroke</span><span class="o">);</span>
</span><span class='line'>					
</span><span class='line'>				<span class="o">}</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>			<span class="k">else</span> <span class="o">{</span> <span class="c1">// There is nothing in the clip board until you select-all, copy, paste </span>
</span><span class='line'>				<span class="n">tempStroke</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyStroke</span><span class="o">(</span><span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">).</span><span class="na">numberOfA</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span><span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">).</span><span class="na">buffer</span> <span class="o">,</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>				<span class="n">strokes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tempStroke</span><span class="o">);</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>		
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">otherResults</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		<span class="kt">boolean</span> <span class="n">quit</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>		<span class="kt">int</span> <span class="n">val</span><span class="o">;</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">do</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;-----------------------------------------&quot;</span><span class="o">);</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Press 1 to see the results path&quot;</span><span class="o">);</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Press 2 to print maxes at every keystroke&quot;</span><span class="o">);</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Press anything else to quit&quot;</span><span class="o">);</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;-----------------------------------------&quot;</span><span class="o">);</span>
</span><span class='line'>			<span class="n">val</span> <span class="o">=</span> <span class="n">getInput</span><span class="o">();</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>			<span class="k">switch</span><span class="o">(</span><span class="n">val</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>				<span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>					<span class="n">printResultPath</span><span class="o">();</span>
</span><span class='line'>					<span class="k">break</span><span class="o">;</span>
</span><span class='line'>				<span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>					<span class="n">printAllStrokes</span><span class="o">();</span>
</span><span class='line'>					<span class="k">break</span><span class="o">;</span>
</span><span class='line'>				<span class="k">default</span><span class="o">:</span>
</span><span class='line'>					<span class="n">quit</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>					<span class="k">break</span><span class="o">;</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>			
</span><span class='line'>		<span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">quit</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getInput</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		
</span><span class='line'>		<span class="kt">int</span> <span class="n">val</span><span class="o">;</span>
</span><span class='line'>		<span class="n">Scanner</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class='line'>		<span class="n">val</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">val</span><span class="o">;</span>
</span><span class='line'>		
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">printResultPath</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		
</span><span class='line'>		<span class="kt">boolean</span> <span class="n">finished</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>		<span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">strokes</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">,</span> <span class="n">distance</span><span class="o">;</span>
</span><span class='line'>		<span class="n">ArrayList</span> <span class="o">&lt;</span><span class="n">KeyStroke</span><span class="o">&gt;</span><span class="n">path</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">KeyStroke</span><span class="o">&gt;();</span>
</span><span class='line'>		<span class="n">ArrayList</span> <span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">humanReadablePath</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">while</span><span class="o">(!</span><span class="n">finished</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">path</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
</span><span class='line'>			<span class="n">distance</span> <span class="o">=</span> <span class="n">index</span> <span class="o">-</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">).</span><span class="na">indexOfParent</span><span class="o">;</span>
</span><span class='line'>			
</span><span class='line'>			<span class="k">if</span><span class="o">(</span><span class="n">distance</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>				<span class="n">humanReadablePath</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;Select-All, Copy, Paste&quot;</span><span class="o">));</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>			<span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">distance</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>				<span class="n">humanReadablePath</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;Paste                  &quot;</span><span class="o">));</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>			<span class="k">else</span> <span class="o">{</span>
</span><span class='line'>				<span class="n">humanReadablePath</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;Press a                &quot;</span><span class="o">));</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>			<span class="n">index</span> <span class="o">=</span> <span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">).</span><span class="na">indexOfParent</span><span class="o">;</span>
</span><span class='line'>			<span class="k">if</span><span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>				<span class="n">path</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">strokes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
</span><span class='line'>				<span class="n">finished</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">humanReadablePath</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;%s %10d &#39;a&#39;s\n&quot;</span><span class="o">,</span> <span class="n">humanReadablePath</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span><span class="n">path</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">numberOfA</span><span class="o">);</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="c1">// This was used to print out all info about the path.</span>
</span><span class='line'>		<span class="c1">// Not useful information.</span>
</span><span class='line'>		<span class="cm">/* for(int i = path.size()-1; i &gt;= 0; i--) {</span>
</span><span class='line'><span class="cm">			printStroke(path.get(i));</span>
</span><span class='line'><span class="cm">		} */</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">CopyPasteProblem</span> <span class="n">cpy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CopyPasteProblem</span><span class="o">();</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;\nHow many &#39;a&#39;s would you like to produce with the minimum amount of keystrokes?&quot;</span><span class="o">);</span>
</span><span class='line'>		
</span><span class='line'>		<span class="kt">int</span> <span class="n">numberToOptimize</span> <span class="o">=</span> <span class="n">cpy</span><span class="o">.</span><span class="na">getInput</span><span class="o">();</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">cpy</span><span class="o">.</span><span class="na">calculateOptomization</span><span class="o">(</span><span class="n">numberToOptimize</span><span class="o">);</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">cpy</span><span class="o">.</span><span class="na">printResults</span><span class="o">();</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">cpy</span><span class="o">.</span><span class="na">otherResults</span><span class="o">();</span>
</span><span class='line'>			
</span><span class='line'>		<span class="k">return</span><span class="o">;</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>		
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another Interview Question]]></title>
    <link href="http://adonley.github.io/blog/2013/05/31/more-interview-questions/"/>
    <updated>2013-05-31T21:22:00-07:00</updated>
    <id>http://adonley.github.io/blog/2013/05/31/more-interview-questions</id>
    <content type="html"><![CDATA[<p>This is another problem that is bound to come up during an interview.</p>

<p>How would you tell if there is a loop in a linked list if there is an arbitrary length, using little to no memory?</p>

<p>The idea in solving this problem is having two iterators, one of which iterates faster through the linked list than the other. This way, the faster moving iterator catches up to - or laps - the slower iterator in the event of a loop. Otherwise the first iterator will find the end of the list.</p>

<p>In the following code example I made the one iterator move twice as fast as the other. At each step I check to see if the iterators point to the same object or the end of the linked list is found.</p>

<p>Feel free to download and try it yourself.</p>

<p>Compile with:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcc LinkedListLoopDetection.c -o LinkedListLoopDetection
</span><span class='line'>$ ./LinkedListLoopDetection &lt; nodes.txt</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (LinkedListLoopDetection.c)</span> <a href='/downloads/code/LinkedListLoopDetection.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Functions</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">listInitialize</span><span class="p">();</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">detectLoop</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// List Node Struct</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Node</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">info</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Globals</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">numberOfNodes</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">loopBegin</span><span class="p">;</span> <span class="c1">// This is the node where the loop starts in the list</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">listInitialize</span><span class="p">();</span>
</span><span class='line'>  <span class="n">detectLoop</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">detectLoop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Going to use two pointers to traverse the list.</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">iter1</span> <span class="o">=</span> <span class="n">list</span><span class="p">,</span> <span class="o">*</span><span class="n">iter2</span> <span class="o">=</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">iter1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">iter1</span> <span class="o">=</span> <span class="n">iter1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// If iter1 equals iter2 we know there is a loop</span>
</span><span class='line'>    <span class="c1">// Also if iter1-&gt;next equals NULL we know there is no loop</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">iter1</span> <span class="o">==</span> <span class="n">iter2</span> <span class="o">||</span> <span class="n">iter1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Move iter a second time</span>
</span><span class='line'>    <span class="n">iter1</span> <span class="o">=</span> <span class="n">iter1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Check Equality Again</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">iter1</span> <span class="o">==</span> <span class="n">iter2</span><span class="p">)</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1">// Move iter2 by one</span>
</span><span class='line'>      <span class="n">iter2</span> <span class="o">=</span> <span class="n">iter2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// If there is there is a NULL pointer we know we reached</span>
</span><span class='line'>  <span class="c1">//   the end of the list</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">iter1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="s">&quot;There was no loop in this Linked List.&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Otherwise the while loop broke because it found a loop</span>
</span><span class='line'>  <span class="c1">//   in the Linked List</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="s">&quot;There was a loop in the Linked List.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Reads in file and initializes the list including a loop</span>
</span><span class='line'><span class="cm"> * if specified.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">listInitialize</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">temp</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// This is to keep track of place in list</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">iter</span><span class="p">,</span> <span class="o">*</span><span class="n">iter2</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Read in number of nodes</span>
</span><span class='line'>  <span class="n">fgets</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="mi">256</span><span class="p">,</span><span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>  <span class="n">numberOfNodes</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Read in loop beginning node</span>
</span><span class='line'>  <span class="n">fgets</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="mi">256</span><span class="p">,</span><span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>  <span class="n">loopBegin</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numberOfNodes</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Throw this guy on the heap</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">iter</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'>      <span class="n">list</span> <span class="o">=</span> <span class="n">iter</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">iter</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'>    <span class="n">fgets</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="mi">256</span><span class="p">,</span><span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>    <span class="n">iter</span><span class="o">-&gt;</span><span class="n">info</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Don&#39;t want to move to next on the last iteration</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">numberOfNodes</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">iter</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">iter</span><span class="p">).</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1">// Get rid of unnecessary allocation</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Negative Value means create no loop</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">loopBegin</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Initialize iter2 to head of the list</span>
</span><span class='line'>    <span class="n">iter2</span> <span class="o">=</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">loopBegin</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Get to the spot where we want to create the loop</span>
</span><span class='line'>      <span class="n">iter2</span> <span class="o">=</span> <span class="n">iter2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Create the Loop</span>
</span><span class='line'>    <span class="n">iter</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">iter2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Create no Loop</span>
</span><span class='line'>    <span class="n">iter</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!--more-->
<p>The first line in nodes.txt signifies how many nodes there are in the list.
The value on the second line signifies which node to connect the last node to (i.e.- from which node to create the loop in the linked list). A negative value here signifies not to create a loop.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (nodes.txt)</span> <a href='/downloads/code/nodes.txt'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>5
</span><span class='line'>3
</span><span class='line'>876
</span><span class='line'>877
</span><span class='line'>878
</span><span class='line'>879
</span><span class='line'>880
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
